{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","theme","setTheme","task_list","setTask_list","className","onClick","console","log","onKeyUp","e","keyCode","target","value","name","type","placeholder","map","task","for","str","newTask_list","filter","task_item","delTask","style","position","bottom","right","color","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uOAwDeA,MArDf,WACE,MAA0BC,mBAAS,SAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAAkCF,mBAAS,IAA3C,mBAAOG,EAAP,KAAkBC,EAAlB,KAyBA,OACE,sBAAKC,UAAqB,UAAVJ,EAAoB,gBAAkB,eAAtD,UACE,oBAAII,UAAU,UAAd,8BACA,yBAAQC,QA3BS,WACL,UAAVL,GACFC,EAAS,QAEG,SAAVD,GACFC,EAAS,SAEXK,QAAQC,IAAIP,IAoBqBI,UAAU,eAAzC,UACE,qBAAKA,UAAqB,UAAVJ,EAAoB,gBAAkB,iBACtD,qBAAKI,UAAqB,UAAVJ,EAAoB,sBAAwB,qBAA5D,SAA6F,UAAVA,EAAoB,eAAO,oBAEhH,qBAAKI,UAAU,UAAf,SACE,uBAAOI,QAvBO,SAACC,GACD,KAAdA,EAAEC,SACmB,KAAnBD,EAAEE,OAAOC,QACXT,EAAa,GAAD,mBAAKD,GAAL,CAAgBO,EAAEE,OAAOC,SACrCN,QAAQC,IAAIE,EAAEE,OAAOC,SAmBQC,KAAK,aAAaC,KAAK,OAAOC,YAAY,6BAGzE,qBAAKX,UAAU,YAAf,SACGF,EAAUc,KAAI,SAACC,GACd,OACE,sBAAKb,UAAqB,UAAVJ,EAAoB,oBAAsB,mBAA1D,UACE,qBAAKa,KAAK,YAAYT,UAAU,YAAhC,SAA4C,+BAAOa,MACnD,uBAAOC,IAAI,YAAYb,QAAS,SAACI,GAAD,OAvB5B,SAACU,GACf,IAAMC,EAAelB,EAAUmB,QAC7B,SAACC,GAAD,OAAeA,IAAcH,KAE/BhB,EAAaiB,GAmBoCG,CAAQN,IAAOb,UAAU,YAAYU,KAAK,qBAKzF,sBAAKU,MAAO,CAAEC,SAAU,QAASC,OAAQ,KAAMC,MAAO,KAAMC,MAAO,SAAWxB,UAAU,YAAxF,gBAAuG,qDCvC9FyB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.37dc27cf.chunk.js","sourcesContent":["import { useState } from 'react';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  const [theme, setTheme] = useState(\"light\");\r\n  const [task_list, setTask_list] = useState([]);\r\n  const themeChanger = () => {\r\n    if (theme === \"light\") {\r\n      setTheme(\"dark\");\r\n    }\r\n    if (theme === \"dark\") {\r\n      setTheme(\"light\");\r\n    }\r\n    console.log(theme);\r\n  };\r\n  const handleEvent = (e) => {\r\n    if (e.keyCode === 13) {\r\n      if (e.target.value !== \"\") {\r\n        setTask_list([...task_list, e.target.value]);\r\n        console.log(e.target.value);\r\n      }\r\n    }\r\n  };\r\n  const delTask = (str) => {\r\n    const newTask_list = task_list.filter(\r\n      (task_item) => task_item !== str\r\n    );\r\n    setTask_list(newTask_list);\r\n  }\r\n  // const bar_color = \r\n  return (\r\n    <div className={theme === \"light\" ? \"App App_light\" : \"App App_dark\"}>\r\n      <h1 className=\"heading\">To-Do List Maker</h1>\r\n      <button onClick={themeChanger} className=\"theme_button\">\r\n        <div className={theme === \"light\" ? \"bar bar_light\" : \"bar bar_dark\"}></div>\r\n        <div className={theme === \"light\" ? \"slider slider_light\" : \"slider slider_dark\"}>{theme === \"light\" ? \"ðŸŒž\" : \"ðŸŒ›\"}</div>\r\n      </button>\r\n      <div className=\"Taskbar\">\r\n        <input onKeyUp={handleEvent} name=\"task_input\" type=\"text\" placeholder=\"Your task goes here...\" />\r\n        {/* <button for=\"task_input\" onClick={(e) => { setTask_list([...task_list, e.target.value]) }} className=\"Add_btn\" type=\"button\">Add</button> */}\r\n      </div>\r\n      <div className=\"TasksView\">\r\n        {task_list.map((task) => {\r\n          return (\r\n            <div className={theme === \"light\" ? \"Tasks Tasks_light\" : \"Tasks Tasks_dark\"}>\r\n              <div name=\"task_name\" className=\"task_text\"><span>{task}</span></div>\r\n              <input for=\"task_name\" onClick={(e) => delTask(task)} className=\"check_box\" type=\"checkbox\" />\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n      <div style={{ position: \"fixed\", bottom: \"2%\", right: \"2%\", color: \"white\" }} className=\"signature\">By <i>Hemanth Kumar</i></div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}